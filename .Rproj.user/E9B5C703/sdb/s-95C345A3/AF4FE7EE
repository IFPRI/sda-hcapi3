{
    "contents" : "#' Plot HarvestChoice 5-arc-minute spatial indicators\n#'\n#' Method to plot HarvestChoice rasters with mutiple layout and symbology options.\n#' See examples below. Note that calling \\code{genPlot(...)} is equivalent to calling\n#' the convenience function \\code{hcapi(..., format=\"png\")}.\n#'\n#' \\figure{PD12_TOT.png}{options: width=\"40\\%\"}\n#' \\figure{AEZ16_CLAS.GHA.print.png}{options: width=\"40\\%\"}\n#' \\figure{whea_h.GHA.print.png}{options: width=\"40\\%\"}\n#' \\figure{FS_2012.png}{options: width=\"40\\%\"}\n#' \\figure{yield_l_cv.png}{options: width=\"40\\%\"}\n#' \\figure{soc_d15.png}{options: width=\"40\\%\"}\n#'\n#'\n#' @param var character array of variable codes to plot\n#' @param iso3 optional ISO3 country or region code to filter by\n#' @param pal optional Brewer color palette used for plotting, e.g. \"Blues\"\n#' @param layout one of \"default\", \"print\", or \"thumbnail\" to control legend and axes\n#' @param style one of \\code{\\link[classInt:classIntervals]{classIntervals}} \\code{style}\n#' @param units one of \"px\" (default), \"in\", \"cm\" or \"mm\".\n#' Passed to \\code{\\link[grDevices:png]{png}}\n#' @param resolution in ppi, by default set to 300ppi for print layout.\n#' Passed to \\code{\\link[grDevices:png]{png}}\n#' options (e.g. \"kmeans\" or \"pretty\") or \"default\" to use default breaks\n#'\n#' @param n \\code{\\link[classInt:classIntervals]{classIntervals}} \\code{n} argument\n#' to control the number of breaks\n#'\n#' @param width plot width in pixel (unless \\code{units} is specified)\n#' @param height plot height in pixel (unless \\code{units} is specified)\n#' @param ... any argument passed to \\code{\\link[grDevices:png]{png}}, e.g. pointsize\n#'\n#' @return Array of generated file names, one for each plot\n#' @examples\n#' # Generate standard raster plot of 2012 population density for sub-Saharan Africa\n#' x <- genPlot(\"PD12_TOT\", pal=\"OrRd\")\n#'\n#' # Generate 3 raster plots for Ghana with legend and title but not axes\n#' x <- genPlot(c(\"AEZ16_CLAS\", \"whea_h\"), iso3=\"GHA\", layout=\"print\")\n#'\n#' # Generate 3 raster plots for Nigeria with the specified dimensions\n#' x <- genPlot(c(\"FS_2012\", \"yield_l_cv\", \"soc_d15\"), width=5, height=5,\n#' units=\"in\", res=200, pointsize=8)\n#'\n#' # This method may be called via HTTP POST request using e.g. cUrl at the command line\n#' # Return 2 plots showing farming systems and 2012 population density in Ghana\n#' # curl http://hcapi.harvestchoice.org/ocpu/library/hcapi3/R/hcapi \\\n#' # -d '{\"var\":[\"FS_2012_TX\", \"PD12_TOT\"], \"iso3\":\"GHA\", \"format\":\"png\"}' \\\n#' # -X POST -H 'Content-Type:application/json'\n#'\n#' # /ocpu/tmp/x03d5aa8e98/R/.val\n#' # /ocpu/tmp/x03d5aa8e98/stdout\n#' # /ocpu/tmp/x03d5aa8e98/source\n#' # /ocpu/tmp/x03d5aa8e98/console\n#' # /ocpu/tmp/x03d5aa8e98/info\n#' # /ocpu/tmp/x03d5aa8e98/files/DESCRIPTION\n#' # /ocpu/tmp/x03d5aa8e98/files/FS_2012_TX.GHA.png\n#' # /ocpu/tmp/x03d5aa8e98/files/PD12_TOT.GHA.png\n#'\n#' # Use wget (at the command line) to download all generated plots\n#' # wget http://hcapi.harvestchoice.org/ocpu/tmp/x03d5aa8e98/zip\n#'\n#' @export\ngenPlot <- function(var, iso3=\"SSA\", pal=character(0),\n  layout=\"default\", style=\"default\", n=integer(0),\n  width=switch(layout, default=640, print=5, thumbnail=120),\n  height=switch(layout, default=640, print=5, thumbnail=120),\n  units=switch(layout, default=\"px\", print=\"in\", thumbnail=\"px\"),\n  res=switch(layout, default=NA, print=300, thumbnail=NA), ...) {\n\n  iso3 <- iso3[1]\n  fPath <- character(0)\n  setkey(vi, varCode)\n\n  # Get GAUL country boundaries\n  rc <- RS.connect(port=getOption(\"hcapi3.port\"), proxy.wait=F)\n  g0 <- RS.eval(rc, g0)\n\n  for (i in var) {\n\n    # Quick validation\n    cat(i, \": \", vi[i][, varLabel], fill=T)\n    if (is.na(vi[i][, varLabel])) next\n\n    # Get HC symbology\n    cv <- as.integer(unlist(strsplit(vi[i][, classBreaks], \"|\", fixed=T)))\n    cl <- as.character(unlist(strsplit(vi[i][, classLabels], \"|\", fixed=T)))\n    cc <- tolower(as.character(unlist(strsplit(vi[i][, classColors], \"|\", fixed=T))))\n\n    # Get data\n    r <- getLayer(i, iso3, collapse=F)\n    setnames(r, i, \"var\")\n\n    switch(vi[i][, type],\n      class = {\n        # Convert categorical rasters to 1-based integer\n        r[, var := as.integer(factor(var, levels=cl, ordered=T))]\n      },\n\n      continuous = {\n        if (style!=\"default\") {\n          # Re-classify using classIntervals()\n          require(classInt)\n          cv <- classIntervals(r$var, style=style, if(!missing(n)) n=n)$brks\n        }\n\n        # Classify to 1-based integer using `cv`\n        cv <- sort(unique(c(min(r$var, na.rm=T)-1, cv, max(r$var, na.rm=T)+1)))\n        r[, var := cut(var, cv)]\n        cl <- levels(r$var)\n        cl <- sapply(strsplit(cl, \",\", cl, fixed=T), `[`, 2)\n        cl <- as.numeric(gsub(\"]\", \"\", cl, fixed=T))\n        cl <- prettyNum(cl, big.mark=\",\")\n        r[, var := as.integer(var)]\n\n        # Plot with HC symbology\n        if (length(pal)>0) {\n          cc <- colorRampPalette(brewer.pal(9, pal))(length(cl))\n        } else {\n          cc <- colorRampPalette(cc)(length(cl))\n        }\n      })\n\n    # Convert to spatial\n    r <- SpatialPixelsDataFrame(r[, list(X, Y)], data.frame(layer=r$var),\n      tolerance=0.00564023, proj4string=CRS(\"+init=epsg:4326\"))\n    r <- raster(r)\n\n    # Crop to SSA (the grid was buffered)\n    if (iso3==\"SSA\") r <- crop(r, g0)\n\n    # Open plot device\n    j <- c(i, if(iso3!=\"SSA\") iso3, if(layout!=\"default\") layout, \"png\")\n    j <- paste(j, collapse=\".\")\n    png(j, width=width, height=height, units=units, res=res, ...)\n\n    # Set global graphic parameters\n    par(family=\"Helvetica-Narrow\", bty=\"n\", cex.axis=.6, col.axis=\"grey50\", fg=\"grey50\")\n\n    switch(layout,\n      default = {\n\n        # Set margins\n        par(mar=c(6,3,4,1), oma=c(0,0,0,7))\n\n        # Plot with axes (default)\n        plot(r, legend=F, col=cc)\n\n        # Add gridlines\n        axis(1, tck=1, lty=3, lwd=.5, col=\"grey80\")\n        axis(2, tck=1, lty=3, lwd=.5, col=\"grey80\")\n\n        # Add legend\n        plot(r, legend.only=T, legend.width=1.5, col=cc,\n          axis.args=list(at=1:length(cl), labels=cl, col.axis=\"grey10\"))\n\n        # Add annotations\n        title(col.main=\"grey10\", adj=0, font.main=1, line=1,\n          main=str_wrap(paste0(\n            vi[i][, varTitle], \" (\", vi[i][, unit], \") - \", names(iso)[iso==iso3]), 50))\n        title(cex.sub=ifelse(width<10, .7, .8), col.sub=\"grey10\", adj=0, line=5, font.sub=1,\n          sub=str_wrap(paste0(\"Source: \", vi[i][, sources], \" \\u00a9HarvestChoice/IFPRI, 2015.\"), 90))\n      },\n\n      print = {\n        # Set margins\n        par(mar=c(6,1,3,1), oma=c(0,0,0,7), xaxs=\"i\", yaxs=\"i\")\n\n        # Remove axes\n        plot(r, legend=F, col=cc, axes=F)\n\n        # Add legend\n        plot(r, legend.only=T, legend.width=1.5, col=cc,\n          axis.args=list(at=1:length(cl), labels=cl, col.axis=\"grey10\"))\n\n        # Add annotations\n        title(col.main=\"grey10\", adj=0, font.main=1, line=0,\n          main=str_wrap(paste0(\n            vi[i][, varTitle], \" (\", vi[i][, unit], \") - \", names(iso)[iso==iso3]), 50))\n        title(cex.sub=ifelse(width<10, .7, .8), col.sub=\"grey10\", adj=0, line=2, font.sub=1,\n          sub=str_wrap(paste0(\"Source: \", vi[i][, sources], \" \\u00a9HarvestChoice/IFPRI, 2015.\"), 90))\n      },\n\n      thumbnail = {\n        # Set margins\n        par(mar=c(0,0,0,0), oma=c(0,0,0,0), xpd=T, xaxs=\"i\", yaxs=\"i\")\n\n        # Remove axes and legend (need to use image() instead of plot())\n        image(r, col=cc, asp=1, axes=F)\n      }\n    )\n\n    # Always add country boundaries\n    plot(g0, col=NA, border=\"gray50\", lwd=.1, add=T)\n\n    if (iso3!=\"SSA\") {\n      # Also add province boundaries\n      g1 <- RS.eval(rc, g1)\n      plot(g1[g1$ADM0_NAME==names(iso)[iso==iso3],], col=NA, border=\"gray\", lwd=.1, add=T)\n    }\n\n    dev.off()\n    fPath <- c(fPath, j)\n  }\n\n  RS.close(rc)\n  return(fPath)\n}\n\n",
    "created" : 1437366557217.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3799975428",
    "id" : "AF4FE7EE",
    "lastKnownWriteTime" : 1437366578,
    "path" : "/home/projects/ocpu/hcapi3/R/genPlot.R",
    "project_path" : "R/genPlot.R",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "type" : "r_source"
}