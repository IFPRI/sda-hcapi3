{
    "contents" : "#' Convert CELL5M layers to raster and/or tabular formats for download\n#'\n#' Package any result from \\code{\\link{getLayer}} into the user-specified tabular or\n#' spatial raster format. Also includes a README file with metadata and citation details.\n#' Currently supported export formats include CSV (csv), STATA (dta), GeoJSON (json), GeoTIFF\n#' (tif), R raster (grd), RData (rda), and ESRI ASCII raster (asc).\n#' Calling \\code{genFile(var=\"bmi\", iso3=\"TZA\", format=\"dta\")} is equivalent to calling\n#' the convenience method \\code{hcapi(var=\"bmi\", iso3=\"TZA\", format=\"dta\")}.\n#'\n#' @param var character array of variable codes, passed to \\code\\link{getLayer}\n#' @param iso3 character array of ISO3 country or region codes, passed to \\code\\link{getLayer}\n#' @param by character array of variable codes to summarize by, passed to \\code\\link{getLayer}\n#' @param format output format c(\"csv\", \"json\", \"tif\", \"dta\", \"asc\", \"grd\", \"rds\")\n#' @param ... any other optional argument \\code\\link{getLayer}, e.g. \\code{by}, \\code{collapse}.\n#' @return character, array of generated file names\n#' @examples\n#' # Total wheat harvested area across 16 agro-ecological zones in Nigeria and Ethiopia\n#' # in STATA format\n#' x <- genFile(\"whea_h\", iso3=c(\"NGA\", \"ETH\"), by=\"AEZ16_CLAS\", format=\"dta\")\n#'\n#' # Load generated STATA file\n#' require(foreign)\n#' x <- read.dta(x[1])\n#'\n#' # Plot histogram with full layer title\n#' hist(x$whea_h, xlab=vi[\"whea_h\"][, varTitle], main=NULL)\n#'\n#' # Sorghum production in Nigeria returned in ESRI ASCII raster format\n#' x <- genFile(\"sorg_p\", iso3=\"NGA\", format=\"asc\")\n#'\n#' # Load and plot generated raster\n#' require(raster)\n#' x <- raster(x[1])\n#' plot(x, main=vi[\"sorg_p\"][, varTitle])\n#' cellStats(x, \"mean\")\n#'\n#' # Equivalent cUrl requests at the command line\n#' # curl http://hcapi.harvestchoice.org/ocpu/library/hcapi3/R/genFile \\\n#' # -d '{\"var\" : \"whea_h\", \"iso3\" : [\"NGA\", \"ETH\"], \"by\" : \"AEZ16_CLAS\", \"format\" : \"dta\"}' \\\n#' # -X POST -H 'Content-Type:application/json'\n#'\n#' # /ocpu/tmp/x0e654538b7/R/.val\n#' # /ocpu/tmp/x0e654538b7/stdout\n#' # /ocpu/tmp/x0e654538b7/warnings\n#' # /ocpu/tmp/x0e654538b7/source\n#' # /ocpu/tmp/x0e654538b7/console\n#' # /ocpu/tmp/x0e654538b7/info\n#' # /ocpu/tmp/x0e654538b7/files/DESCRIPTION\n#' # /ocpu/tmp/x0e654538b7/files/README\n#' # /ocpu/tmp/x0e654538b7/files/whea_h-AEZ16_CLAS-NGA.dta\n#'\n#' # Use wget (at the command line) to download all generated files in a ZIP archive\n#' # wget http://hcapi.harvestchoice.org/ocpu/tmp/x0e654538b7/zip\n#'\n#' # curl http://hcapi.harvestchoice.org/ocpu/library/hcapi3/R/genFile \\\n#' # -d '{\"var\" : \"sorg_p\", \"format\" : \"asc\"}' \\\n#' # -X POST -H \"Content-Type:application/json\"\n#'\n#' # /ocpu/tmp/x02a7a044c7/R/.val\n#' # /ocpu/tmp/x02a7a044c7/stdout\n#' # /ocpu/tmp/x02a7a044c7/warnings\n#' # /ocpu/tmp/x02a7a044c7/source\n#' # /ocpu/tmp/x02a7a044c7/console\n#' # /ocpu/tmp/x02a7a044c7/info\n#' # /ocpu/tmp/x02a7a044c7/files/DESCRIPTION\n#' # /ocpu/tmp/x02a7a044c7/files/README\n#' # /ocpu/tmp/x02a7a044c7/files/sorg_p--SSA.asc\n#' # /ocpu/tmp/x02a7a044c7/files/sorg_p--SSA.asc.aux.xml\n#' # /ocpu/tmp/x02a7a044c7/files/sorg_p--SSA.prj\n#'\n#' # Then use wget to download all generated files in a ZIP archive\n#' # wget http://hcapi.harvestchoice.org/ocpu/tmp/x02a7a044c7/zip\n#'\n#' @export\ngenFile <- function(var, iso3=\"SSA\", by=NULL,\n  format=c(\"csv\", \"geojson\", \"tif\", \"dta\", \"asc\", \"rda\", \"grd\"), ...) {\n\n  setkey(vi, varCode)\n\n  # Validate format\n  format <- tolower(format)\n  if ( format %in% c(\"tiff\", \"geotiff\", \"geotif\") ) format <- \"tif\"\n  else if ( format %in% c(\"geojson\", \"json\") ) format <- \"geojson\"\n  else if ( format %in% c(\"grid\", \"grd\") ) format <- \"grd\"\n  else if ( format %in% c(\"rdata\", \"RDA\", \"rda\", \"RData\", \"Rdata\", \"rds\") ) format <- \"rds\"\n  else return(cat(format, \"is not a recognized format\"))\n\n  # Construct temporary data file name\n  fPath <- paste(paste(var[1], by[1], iso3[1], sep=\"-\"), format[1], sep=\".\")\n\n  if ( format %in% c(\"grd\", \"asc\", \"tif\", \"geojson\") ) {\n    # Call getLayer() and don't collapse for spatial formats\n    d <- getLayer(var, iso3, by, collapse=F, ...)\n  } else {\n    d <- getLayer(var, iso3, by, ...)\n  }\n\n  if ( format %in% c(\"asc\", \"tif\", \"grd\") ) {\n    # Process only the first layer (not all raster formats support multibands)\n    var <- var[1]\n\n    cl <- as.character(unlist(vi[var][, strsplit(classLabels, \"|\", fixed=T)]))\n    cc <- as.character(unlist(vi[var][, strsplit(classColors, \"|\", fixed=T)]))\n    ct <- \"Float32\"\n\n    if ( vi[var][, type] == \"class\" )  {\n      # If categorical raster, then convert to 0-based integer and add labels\n      d[[var]] <- as.integer(factor(d[[var]], levels=cl, ordered=T))-1L\n      ct <- \"Byte\"\n    }\n\n    # Convert to unprojected raster\n    d <- SpatialPixelsDataFrame(d[, list(X, Y)], d,\n      tolerance=0.00360015, proj4string=CRS(\"+init=epsg:4326\"))\n  }\n\n  switch(format,\n\n    tif = {\n      # GeoTIFF\n      writeGDAL(d[, var], fPath, driver=\"GTiff\",\n        mvFlag=-9999, type=ct, setStatistics=T,\n        catNames=list(cl), colorTables=list(cc),\n        options=c(\"INTERLEAVE=BAND\", \"TFW=YES\", \"ESRI_XML_PAM=YES\")) },\n\n    grd = {\n      # Raster grid\n      writeGDAL(d[, var], fPath, driver=\"raster\",\n        mvFlag=-9999, type=ct, setStatistics=T,\n        catNames=list(cl), colorTables=list(cc),\n        options=c(\"INTERLEAVE=BAND\", \"TFW=YES\", \"ESRI_XML_PAM=YES\")) },\n\n    asc = {\n      # ESRI ASCII grid\n      writeGDAL(d[, var], fPath, driver=\"AAIGrid\",\n        mvFlag=-9999, type=ct, setStatistics=T,\n        catNames=list(cl), colorTables=list(cc),\n        options=c(\"INTERLEAVE=BAND\", \"TFW=YES\", \"ESRI_XML_PAM=YES\")) },\n\n    geojson = {\n      # GeoJSON\n      d <- SpatialPointsDataFrame(d[, list(X, Y)], d,\n        proj4string=CRS(\"+proj=longlat +datum=WGS84 +no_defs\"))\n      writeOGR(d, fPath, var[1], driver=\"GeoJSON\") },\n\n    dta = {\n      # Stata\n      setattr(d, \"var.labels\", vi[names(d)][, paste0(varLabel, \" (\", unit, \")\")])\n      setattr(d, \"datalabel\", \"Produced by HarvestChoice/IFPRI at http://hcapi.harvestchoice.org/. Contact <info@harvestchoice.org>.\")\n      setattr(d, \"time.stamp\", Sys.Date())\n      write.dta(d, fPath, version=10L) },\n\n    rds = {\n      # RDS\n      attr(d, \"var.labels\") <- vi[names(d)][, varLabel]\n      attr(d, \"datalabel\") <- \"Produced by HarvestChoice/IFPRI at http://hcapi.harvestchoice.org/. Contact <info@harvestchoice.org>.\"\n      attr(d, \"time.stamp\") <- as.character(as.Date(Sys.Date()))\n      saveRDS(d, file=fPath) },\n\n    {\n      # CSV (default)\n      write.csv(d, fPath, row.names=F, na=\"\") }\n  )\n\n  f <- list.files(dirname(fPath), paste0(basename(fPath), \".*\"), full.names=T)\n  f <- c(f, genReadme(names(d)))\n  #fPath <- paste(fPath, \"zip\", sep=\".\")\n  #zip(fPath, f, flags=\"-9Xjm\", zip=\"zip\")\n  return(f)\n}\n",
    "created" : 1437358785604.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4013244405",
    "id" : "D8339D8D",
    "lastKnownWriteTime" : 1437365577,
    "path" : "/home/projects/ocpu/hcapi3/R/genFile.R",
    "project_path" : "R/genFile.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}