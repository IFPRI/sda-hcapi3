{
    "contents" : "#####################################################################################\n# Title: Testing Interactive Viz with leaflet\n# Date: December 2014\n# Project: HarvestChoice/IFPRI\n# Authors: Bacou, Melanie <mel@mbacou.com>\n#####################################################################################\n\nsetwd(\"/home/projects/shiny/tmp\")\n\nlibrary(data.table)\nlibrary(shiny)\nlibrary(shinyBS)\nlibrary(hcapi3)\nlibrary(leaflet)\nlibrary(classInt)\n\n\ngetCircles <- function(var=\"PN05_TOT\", iso3=\"GHA\", ...) {\n  # Query hcapi3\n  tmp <- getLayer(var, iso3, ...)\n  setkey(tmp, X, Y)\n  setnames(tmp, length(names(tmp)), \"my_var\")\n  tmp <- tmp[!is.na(my_var)]\n\n  # Get default symbology from `vi`\n  cc <-  as.character(unlist(strsplit(vi[var][, classColors], \"|\", fixed=T)))\n  cv <- try(classIntervals(tmp$my_var, style=\"kmeans\")$brks)\n\n  if (class(cv)==\"try-error\") {\n    # Not enough data for kmeans, alert, and create empty data.table\n    createAlert(session, \"alertNoData\",\n      title=\"No Data!\",\n      message=\"Choose another combination.\",\n      type=\"warning\", block=T)\n    tmp <- data.table(X=NA, Y=NA, my_var=NA, my_col=NA)\n\n  } else {\n    # kmeans algo worked, good to classify\n    rg <- range(tmp$my_var, na.rm=T)\n    tmp[, my_col := cut(my_var, unique(c(rg[1]-1, cv, rg[2]+1)), cutlabels=F, ordered_result=T)]\n    tmp[, my_col := colorRampPalette(cc)(length(cv)+1)[my_col]]\n    tmp[is.na(my_col), my_col := \"#ffffff\"]\n  }\n  return(tmp)\n}\n\n# Init some variables\nmy_iso3 <- \"GHA\"\nmy_var <- \"PN05_TOT\"\nmy_dom <- \"ADM1_NAME_ALT\"\n\n\nshinyServer(function(input, output, session) {\n\n  # Create the map\n  map <- createLeafletMap(session, \"map\")\n\n  # Create controls\n  output$selectCat <- renderUI({ selectInput(\"selectCat\", \"Choose a Category\",\n    vi[order(cat1), unique(cat1)][-1],\n    selected=\"Demographics\") })\n\n  output$selectVar <- renderUI({ selectInput(\"selectVar\", \"Choose a Layer\",\n    varlst(),\n    selected=my_var) })\n\n  output$selectISO3 <- renderUI({ selectInput(\"selectISO3\", \"Choose a Country\",\n    iso,\n    selected=my_iso3) })\n\n  output$selectFilter <- renderUI({ sliderInput(\"selectFilter\", \"Filter layer to Min/Max\",\n    stats()[1, Value], stats()[6, Value],\n    c(stats()[1, Value], stats()[6, Value]), round=T) })\n\n  output$varTitle <- reactive({\n    ifelse(length(input$selectVar)>0, vi[var()][, varTitle], \"\")\n  })\n\n  output$saveData <- downloadHandler(\n    function() paste0(\"data-\", Sys.Date(), \".zip\"),\n    function(file) file.copy(genFile(var(), iso3(), format=input$fileType), file)\n  )\n\n  output$tableSum <- renderTable(digits=0, include.rownames=F,\n    format.args=list(big.mark=\",\", decimal.mark=\".\"),\n    stats())\n\n  output$plotHist <- renderPlot(width=220, height=220, {\n    par(mar=c(2,2,0,0), bty=\"n\", family=\"Helvetica-Narrow\", cex.axis=.8)\n    hist(dtFilter()$my_var, col=4, border=\"white\", main=NULL, ylab=NULL, xlab=NULL)\n  })\n\n  # Not sure that's the right way to init variables\n  cat <- reactive({\n    ifelse(length(input$selectCat)>0, input$selectCat, \"Demographics\")\n  })\n\n  varlst <- reactive({\n    tmp <- vi[genRaster==T & type==\"continuous\" & cat1==cat(), varCode]\n    names(tmp) <- vi[tmp][, varLabel]\n    return(tmp)\n  })\n\n  var <- reactive({\n    # Bound to btnLayer\n    if (input$btnLayer==0) my_var else isolate(input$selectVar)\n  })\n\n  iso3 <- reactive({\n    # Bound to btnLayer\n    if (input$btnLayer==0) my_iso3 else isolate(input$selectISO3)\n  })\n\n  # Query and symbolize layer\n  dt <- reactive({\n    getCircles(var(), iso3())\n  })\n\n  # Filter layer\n  dtFilter <- reactive({\n    tmp <- input$selectFilter\n    tmp <- dt()[my_var >= tmp[1] & my_var <= tmp[2]]\n    tmp <- tmp[ADM1_NAME_ALT!=\"buffer gridcell\"]\n    return(tmp)\n  })\n\n  # Compute 5 stats\n  stats <- reactive({\n    tmp <- summary(dt()$my_var)\n    tmp <- data.table(Statistic=names(tmp), Value=tmp)\n    return(tmp)\n  })\n\n  # Draw raster\n  drawObs <- observe({\n    # Clear existing circles before drawing\n    map$clearShapes()\n    tmp <- dtFilter()\n\n    if ( !identical(my_iso3, iso3()) ) {\n      # Recenter map only if country has changed\n      map$clearShapes()\n      map$setView(mean(tmp$Y, na.rm=T), mean(tmp$X+2, na.rm=T), 6)\n      my_iso3 <<- iso3()\n\n      # Draw circles\n      map$addCircle(\n        tmp$Y, tmp$X, 5000, tmp$CELL5M,\n        options=list(stroke=F, fillOpacity=0.55, fill=T),\n        eachOptions=list(fillColor=tmp$my_col)\n      )\n\n    } else {\n      # Draw circles (placeholder for optimized code)\n      map$addCircle(\n        tmp$Y, tmp$X, 5000, tmp$CELL5M,\n        options=list(stroke=F, fillOpacity=0.55, fill=T),\n        eachOptions=list(fillColor=tmp$my_col))\n    }\n  })\n\n  # When map is clicked, show a popup with layer info\n  clickObs <- observe({\n    map$clearPopups()\n    event <- input$map_shape_click\n    if (is.null(event)) return()\n    isolate({\n      tmp <- dt()[CELL5M==event$id]\n      map$showPopup(event$lat, event$lng, paste(\n        \"CELL5M: \", event$id, \"<br/>\",\n        \"Lat: \", event$lat, \"<br/>\",\n        \"Long: \", event$lng, \"<br/>\",\n        \"Province: \", tmp$ADM1_NAME_ALT, \"<br/>\",\n        \"District: \", tmp$ADM2_NAME_ALT, \"<br/>\",\n        \"Value: \", tmp$my_var, \" \", vi[var()][, unit]))\n    })\n  })\n\n\n  ################################################################################\n  # Domain Summary\n  ################################################################################\n\n  output$selectDomain <- renderUI({ selectInput(\"selectDomain\",\n    \"Choose a layer to summarize by\", domlst())\n  })\n\n  output$tableDomain <- renderTable(digits=0, include.rownames=F,\n    format.args=list(big.mark=\",\", decimal.mark=\".\"), {\n      dtDomain()\n    })\n\n  domlst <- function() {\n    # Just select random 10 variables to test\n    tmp <- c(my_dom, vi$varCode[sample(1:600, 10)])\n    names(tmp) <- vi[tmp][, varLabel]\n    return(tmp)\n  }\n\n  domby <- reactive({\n    # Bound to btnDomain\n    if (input$btnDomain==0) my_dom else isolate(input$selectDomain)\n  })\n\n  # Summarize layer\n  dtDomain <- reactive({\n    tmp <- getLayer(var(), iso3(), domby())\n    setkeyv(tmp, domby())\n    setnames(tmp, 1:2, vi[c(domby(), var())][, varLabel])\n  })\n\n  drawObsDomain <- observe({\n    # Bound to btnMapDomain\n    if (input$btnDomain==0) return()\n\n    isolate({\n      # Clear existing circles before drawing\n      map$clearShapes()\n      # Summarize and symbolize layer\n      tmp <- getCircles(var(), iso3(), domby(), collapse=F)\n      # Draw circles\n      map$addCircle(\n        tmp$Y, tmp$X, 5000, tmp$CELL5M,\n        options=list(stroke=F, fillOpacity=0.55, fill=T),\n        eachOptions=list(fillColor=tmp$my_col))\n    })\n  })\n\n\n  ################################################################################\n  # Homologue Tool\n  ################################################################################\n\n\n  selectedLayer <- as.character(NA)\n\n  output$selectRank <- reactive({\n    paste(unique(addRank()[!is.na(addRank())]), collapse=\"<br/>\")\n  })\n\n  addRank <- reactive({\n    input$btnAddRank\n    isolate({ selectedLayer <<- c(selectedLayer, input$selectVar) })\n    return(selectedLayer)\n  })\n\n\n\n\n})\n",
    "created" : 1432238998928.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2295703870",
    "id" : "4CC1F586",
    "lastKnownWriteTime" : 1420675692,
    "path" : "/home/projects/shiny/cell5m/server.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}