#+TITLE: HCAPI3
#+AUTHOR: Melanie Bacou
#+EMAIL: mel@mbacou.com
#+DATE: {{{modification-time(%Y-%m-%d)}}}

#+OPTIONS: H:2 num:1 toc:2 \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+LaTeX_CLASS: mel-article
#+STARTUP: indent showstars

Port of HarvestChoice Data Services to an OpenCPU server at http://hcapi.harvestchoice.org/ocpu/library/hcapi3. More about HarvestChoice datasets for sub-Saharan Africa at http://harvestchoice.org/data/.

** Overview

The package documentation is at http://hcapi.harvestchoice.org/ocpu/library/hcapi3/info. Documentation for each available method may be accessed using =/man/<method>=, for example at http://hcapi.harvestchoice.org/ocpu/library/hcapi3/man/getLayer
also in PDF format using =/man/<method>/pdf= at
http://hcapi.harvestchoice.org/ocpuq/library/hcapi3/man/getLayer/pdf.

HTTP GET and POST requests may be tested interactively at http://hcapi.harvestchoice.org/ocpu/. To test requests in the console, use the following =curl= syntax. Arguments may be passed as well-structured json array with curl =-H "Content-Type:application/json"= flag or more directly as URL argument using =-d "param1='value1'&param2='value2'"= construct. JavaScript examples are available from [[https://www.opencpu.org/jslib.html][OpenCPU]].

#+BEGIN_SRC sh
// Simple data request with aggregation at district level (Ethiopia)
$  curl http://hcapi.harvestchoice.org/ocpu/library/hcapi3/R/getLayer/json -d '{"var": ["whea_h", "bmi"], "iso3": "ETH", "by": "ADM2_NAME_ALT", "as.class" : "list"}' -X POST -H "Content-Type:application/json"
{
    "ColumnList": [
        {
            "ColumnCode": "ADM2_NAME_ALT",
            "ColumnName": "Adm-2 Name (GAUL, 2008 mod.)",
            "ColumnUnit": "class",
            "ColumnDesc": "Second-level administrative boundaries based on GAUL 2008 (release 2009).",
            "ColumnSource": "Food and Agriculture Organization of the United Nations. FAO GEONETWORK. Global Administrative Unit Layers (GAUL) (GeoLayer). (Latest update: 18 Feb 2014) Accessed (20 Feb 2014). URI: http://data.fao.org/ref/f7e7adb0-88fd-11da-a88f-000d939bc5d8.html?version=1.0"
        },
        {
            "ColumnCode": "whea_h",
            "ColumnName": "Wheat area '05",
            "ColumnUnit": "ha",
            "ColumnDesc": "Spatially disaggregated production statistics of circa 2000 using the Spatial Production Allocation Model (SPAM). Values are for 5 arc-minute grid cells.",
            "ColumnSource": "You, L., Z. Guo, J. Koo, K. Sebastian, and U. Wood-Sichra. Spatial Production Allocation Model (SPAM) 2005 Version 1."
        },
        {
            "ColumnCode": "bmi",
            "ColumnName": "BMI",
            "ColumnUnit": "index",
            "ColumnDesc": "BMI (not adjusted for pregnancy)",
            "ColumnSource": "MEASURE Demographic and Health Surveys (multiple surveys), 2005-2012"
        }
    ],
    "ValueList": [
        [
            "North Western Tigray",
            " 13003",
            "19.0"
        ],
        [
            "Central Tigray",
            " 27858",
            "19.0"
        ],
        [
            "Eastern Tigray",
            " 18586",
            "19.0"
        ],
        [
            "Afar Zone 2",
            "     8",
            "18.8"
        ],
        [ truncated...
        ]
    ]
}

#+END_SRC

#+BEGIN_SRC sh
// HC API also supports json gzip compression with '--compress' argument thanks to OpenCPU. This is only useful on large data responses, otherwise entails a little extra overhead.
$  time curl http://hcapi.harvestchoice.org/ocpu/library/hcapi3/R/getLayer/json --compress -d '{"var": ["whea_h", "bmi"], "iso3": "GHA", "by": "ADM1_NAME_ALT"}' -X POST -H "Content-Type:application/json"

[
    {
        "ADM1_NAME_ALT": "Upper East",
        "whea_h": 0,
        "bmi": 20.7
    },
    {
        "ADM1_NAME_ALT": "Upper West",
        "whea_h": 0,
        "bmi": 21.1
    },
    {
        "ADM1_NAME_ALT": "Northern",
        "whea_h": 0,
        "bmi": 20.9
    },
    {
        "ADM1_NAME_ALT": "Brong Ahafo",
        "whea_h": 0,
        "bmi": 21.3
    },
    {
        "ADM1_NAME_ALT": "Volta",
        "whea_h": 0,
        "bmi": 21.9
    },
    {
        "ADM1_NAME_ALT": "Ashanti",
        "whea_h": 0,
        "bmi": 22.2
    },
    {
        "ADM1_NAME_ALT": "Eastern",
        "whea_h": 0,
        "bmi": 23.1
    },
    {
        "ADM1_NAME_ALT": "Western",
        "whea_h": 0,
        "bmi": 22.6
    },
    {
        "ADM1_NAME_ALT": "Central",
        "whea_h": 0,
        "bmi": 22.9
    },
    {
        "ADM1_NAME_ALT": "Greater Accra",
        "whea_h": 0,
        "bmi": 22.8
    },
    {
        "ADM1_NAME_ALT": "buffer gridcell",
        "whea_h": 0
    }
]

real    0m0.913s
user    0m0.000s
sys     0m0.031s

#+END_SRC

#+BEGIN_SRC sh
// Same request returning a simple json array (no metadata)
$  curl http://hcapi.harvestchoice.org/ocpu/library/hcapi3/R/getLayer/json -d '{"var": ["whea_h", "bmi"], "iso3": "ETH", "by": "ADM2_NAME_ALT"}' -X POST -H "Content-Type:application/json"
[
    {
        "ADM2_NAME_ALT": "North Western Tigray",
        "whea_h": 13003,
        "bmi": 19
    },
    {
        "ADM2_NAME_ALT": "Central Tigray",
        "whea_h": 27858,
        "bmi": 19
    },
    { truncated...
    }
]

#+END_SRC

#+BEGIN_SRC sh
// Request a STATA file (takes 2 calls to generate and then download ZIP file)
$ curl http://hcapi.harvestchoice.org/ocpu/library/hcapi3/R/genFile -d '{"var": "whea_h", "iso3" : "GHA", "by" : "ADM2_NAME_ALT", "format" : "dta"}' -X POST -H "Content-Type:application/json"
/ocpu/tmp/x0a3355977c/R/.val
/ocpu/tmp/x0a3355977c/messages
/ocpu/tmp/x0a3355977c/stdout
/ocpu/tmp/x0a3355977c/source
/ocpu/tmp/x0a3355977c/console
/ocpu/tmp/x0a3355977c/info
/ocpu/tmp/x0a3355977c/files/DESCRIPTION
/ocpu/tmp/x0a3355977c/files/whea_h-ADM2_NAME_ALT-GHA.dta.zip

$ wget http://hcapi.harvestchoice.org/ocpu/tmp/x0a3355977c/files/whea_h-ADM2_NAME_ALT-GHA.dta.zip

#+END_SRC

#+BEGIN_SRC sh
// Request a GeoTIFF file
$ time curl http://hcapi.harvestchoice.org/ocpu/library/hcapi3/R/genFile -d '{"var": ["whea_h", "bmi"], "iso3": "ETH", "format": "tiff"}' -X POST -H "Content-Type:application/json"
/ocpu/tmp/x00c295c697/R/.val
/ocpu/tmp/x00c295c697/stdout
/ocpu/tmp/x00c295c697/source
/ocpu/tmp/x00c295c697/console
/ocpu/tmp/x00c295c697/info
/ocpu/tmp/x00c295c697/files/DESCRIPTION
/ocpu/tmp/x00c295c697/files/whea_h--ETH.tiff.zip

real    0m0.983s
user    0m0.015s
sys     0m0.030s

$ time wget http://hcapi.harvestchoice.org/ocpu/tmp/x00c295c697/files/whea_h--ETH.tiff.zip
--2014-12-20 18:57:09--  http://hcapi.harvestchoice.org/ocpu/tmp/x00c295c697/files/whea_h--ETH.tiff.zip
Resolving hcapi.harvestchoice.org (hcapi.harvestchoice.org)... 206.190.150.74
Connecting to hcapi.harvestchoice.org (hcapi.harvestchoice.org)|206.190.150.74|:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: unspecified [application/zip]
Saving to: ‘whea_h--ETH.tiff.zip’

whea_h--ETH.tiff.zip      [  <=>                     ]  79.59K   200KB/s   in 0.4s

2014-12-20 18:57:09 (200 KB/s) - ‘whea_h--ETH.tiff.zip’ saved [81498]

real    0m1.007s
user    0m0.015s
sys     0m0.062s

#+END_SRC

#+BEGIN_SRC sh
// Return variable metadata only (variable codes by category)
$ curl http://hcapi.harvestchoice.org/ocpu/library/hcapi3/R/getGroups/json -d "group='whea'" -X POST        {
    "Agroecology": {
        "Pests and Diseases": [
            {
                "Category": "Agroecology",
                "Subcategory": "Pests and Diseases",
                "Item": "Wheat Stemrust",
                "Code": "IR_EI",
                "Title": "Stemrust Prevalence in Irrigated Wheat"
            },
            {
                "Category": "Agroecology",
                "Subcategory": "Pests and Diseases",
                "Item": "Wheat Stemrust",
                "Code": "IR_EI_CLAS",
                "Title": "Stemrust Prevalence in Irrigated Wheat (Low-Med-High)"
            },
            {
                "Category": "Agroecology",
                "Subcategory": "Pests and Diseases",
                "Item": "Wheat Stemrust",
                "Code": "IR_GI",
                "Title": "Stemrust Prevalence in Irrigated Wheat"
            },
            {
                "Category": "Agroecology",
                "Subcategory": "Pests and Diseases",
                "Item": "Wheat Stemrust",
                "Code": "IR_GI_CLAS",
                "Title": "Stemrust Prevalence in Irrigated Wheat (Low-Med-High)"
            },
            {
                "Category": "Agroecology",
                "Subcategory": "Pests and Diseases",
                "Item": "Wheat Stemrust",
                "Code": "RF_EI",
                "Title": "Stemrust Prevalence in Rainfed Wheat"
            },
            {
                "Category": "Agroecology",
                "Subcategory": "Pests and Diseases",
                "Item": "Wheat Stemrust",
                "Code": "RF_EI_CLAS",
                "Title": "Stemrust Prevalence in Rainfed Wheat (Low-Med-High)"
            },
            {
                "Category": "Agroecology",
                "Subcategory": "Pests and Diseases",
                "Item": "Wheat Stemrust",
                "Code": "RF_GI",
                "Title": "Stemrust Prevalence in Rainfed Wheat"
            },
            {
                "Category": "Agroecology",
                "Subcategory": "Pests and Diseases",
                "Item": "Wheat Stemrust",
                "Code": "RF_GI_CLAS",
                "Title": "Stemrust Prevalence in Rainfed Wheat (Low-Med-High)"
            }
        ]
    },
    "Farming Systems": {
        "Harvested Area": [
            {
                "Category": "Farming Systems",
                "Subcategory": "Harvested Area",
                "Item": "Wheat",
                "Code": "whea_h",
                "Title": "Wheat Harvested Area (ha, 2005)"
            },
            {
                "Category": "Farming Systems",
                "Subcategory": "Harvested Area",
                "Item": "Wheat",
                "Code": "whea_i_h",
                "Title": "Wheat Irrigated Harvested Area (ha, 2005)"
            },
            {
                "Category": "Farming Systems",
                "Subcategory": "Harvested Area",
                "Item": "Wheat",
                "Code": "whea_r_h",
                "Title": "Wheat Rainfed Harvested Area (ha, 2005)"
            }
        ],
        "Production": [
            {
                "Category": "Farming Systems",
                "Subcategory": "Production",
                "Item": "Wheat",
                "Code": "whea_i_p",
                "Title": "Wheat Irrigated Production (mt, 2005)"
            },
            {
                "Category": "Farming Systems",
                "Subcategory": "Production",
                "Item": "Wheat",
                "Code": "whea_p",
                "Title": "Wheat Production (mt, 2005)"
            },
            {
                "Category": "Farming Systems",
                "Subcategory": "Production",
                "Item": "Wheat",
                "Code": "whea_r_p",
                "Title": "Wheat Rainfed Production (mt, 2005)"
            }
        ],
        "Value of Production": [
            {
                "Category": "Farming Systems",
                "Subcategory": "Value of Production",
                "Item": "Wheat",
                "Code": "whea_v",
                "Title": "Wheat Value Production (Int$, 2005)"
            }
        ],
        "Yield": [
            {
                "Category": "Farming Systems",
                "Subcategory": "Yield",
                "Item": "Wheat",
                "Code": "whea_i_y",
                "Title": "Wheat Irrigated Yield (kg/ha, 2005)"
            },
            {
                "Category": "Farming Systems",
                "Subcategory": "Yield",
                "Item": "Wheat",
                "Code": "whea_r_y",
                "Title": "Wheat Rainfed Yield (kg/ha, 2005)"
            },
            {
                "Category": "Farming Systems",
                "Subcategory": "Yield",
                "Item": "Wheat",
                "Code": "whea_y",
                "Title": "Wheat Yield (kg/ha, 2005)"
            }
        ]
    }
}

#+END_SRC

#+BEGIN_SRC sh
// Return full variable metadata
$ curl http://hcapi.harvestchoice.org/ocpu/library/hcapi3/R/getMeta/json -d "var='whea_h'" -X POST
[
    {
        "Label": "Wheat area '05",
        "Code": "whea_h",
        "Unit": "ha",
        "Type": "continuous",
        "Period": "2000",
        "Category": "Farming Systems",
        "Subcategory": "Harvested Area",
        "Item": "Wheat",
        "Source": "You, L., Z. Guo, J. Koo, K. Sebastian, and U. Wood-Sichra. Spatial Production Allocation Model (SPAM) 2005 Version 1.",
        "Contact": "u.wood-sichra@cgiar.org",
        "Details": "Wheat Harvested Area (ha, 2005). Spatially disaggregated production statistics of circa 2000 using the Spatial Production Allocation Model (SPAM). Values are for 5 arc-minute grid cells.",
        "Citation": "HarvestChoice, 2014. \"Wheat Harvested Area (ha, 2005)\", International Food Policy Research Institute, Washington, DC., and University of Minnesota, St. Paul, MN. Available online at http://harvestchoice.org/data/whea_h",
        "Version": "SChEF r2.0",
        "In Table": "cell5m_spam2005v1_harvestarea",
        "Formula": "",
        "isRaster": true,
        "dTopic": "Production",
        "dCrop": "Wheat",
        "dKeywords": "Crop, Crop Area, Wheat Area, Wheat Production, Sub-Saharan Africa",
        "classBreaks": "0|79|260|495|812|1360|2590",
        "classLabels": "none|under 80|80 - 260|260 - 495|495 - 812|812 - 1360|over 1360",
        "classColors": "#ffffffff|#EDF8E9|#C7E9C0|#A1D99B|#74C476|#31A354|#006D2C",
        "Website": "http://harvestchoice.org/data/whea_h",
        "WMS": "http://dev.harvestchoice.org:6080/arcgis/services/spam05_cell5m_h/MapServer/WMSServer",
        "Downloaded on": "2014-11-03"
    }
]

#+END_SRC

** Updates

*2014.12.18*: added a new argument `as.class=c("data.table", "list")` to getLayer() to allow control on the structure of the generated JSON response.

*2014.12.14*: lazy-loaded datasets now automatically update on package rebuild. Package may now be installed and loaded on remote clients. To install, use:

#+BEGIN_SRC sh
$ wget https://github.com/harvestchoice/hcapi3/blob/master/hcapi3_3.0_R_x86_64-redhat-linux-gnu.tar.gz
$ R CMD INSTALL hcapi3_3.0_R_x86_64-redhat-linux-gnu.tar.gz
#+END_SRC

*2014.11.11*: added a new method =reClassify()= for "on-the-fly" domain classification (aka. Spatial Targeting Tool) documented at http://hcapi.harvestchoice.org/ocpu/library/hcapi3/man/reClassify/pdf.

#+BEGIN_SRC sh
// Sample request
$ time curl http://hcapi.harvestchoice.org/ocpu/library/hcapi3/R/reClassify/json \
 -d '{"var" : ["whea_h", "AEZ16_CLAS"], "by" : {"AEZ16_CLAS": "Tropic - warm / semiarid", "PD05_RUR" : [60, 100], "TT_20K" : [0, 5]}}' \
 -X POST -H "Content-Type:application/json"
[
    {
        "TT_20K": "(0,5]",
        "whea_h": 111336,
        "AEZ16_CLAS": "Tropic - warm / semiarid"
    },
    {
        "whea_h": 26446,
        "AEZ16_CLAS": "Tropic - warm / semiarid"
    },
    {
        "PD05_RUR": "(60,100]",
        "TT_20K": "(0,5]",
        "whea_h": 14437,
        "AEZ16_CLAS": "Tropic - warm / semiarid"
    },
    {
        "PD05_RUR": "(60,100]",
        "whea_h": 6201,
        "AEZ16_CLAS": "Tropic - warm / semiarid"
    }
]

real    0m1.100s
user    0m0.015s
sys     0m0.015s
#+END_SRC

*2014.11.10*: changed data storage from sqlite database to persistent Rserve session (faster). rApache and RSQLite seemed to have a library conflict (logged bug [[https://github.com/rstats-db/RSQLite/issues/60#issuecomment-62497666][#issuecomment-62497666]]).

*2014.11.10*: added a new method =getLayerWKT()= to support point/polygon summaries.

#+BEGIN_SRC sh
// Sample request with a few points
$ time curl http://hcapi.harvestchoice.org/ocpu/library/hcapi3/R/getLayerWKT/json \
 -d '{"var" : ["whea_h", "AEZ16_CLAS"], "wkt" : "MULTIPOINT((35.69319860636820607 -3.91388197570256979), (35.47695932281013853 -4.34541210453119486), (36.61014339398586515 -6.19304393571206635), (36.47436786329777902 -5.51879978940470828))"}' \
 -X POST -H "Content-Type:application/json"

[
    {
        "CELL5M": 4987879,
        "ISO3": "TZA",
        "ADM0_NAME": "United Republic of Tanzania",
        "ADM1_NAME_ALT": "Dodoma",
        "ADM2_NAME_ALT": "Kongwa",
        "X": 36.625,
        "Y": -6.2083,
        "whea_h": 0,
        "AEZ16_CLAS": "Tropic - warm / semiarid"
    },
    {
        "CELL5M": 4866908,
        "ISO3": "TZA",
        "ADM0_NAME": "United Republic of Tanzania",
        "ADM1_NAME_ALT": "Manyara",
        "ADM2_NAME_ALT": "Babati",
        "X": 35.7083,
        "Y": -3.875,
        "whea_h": 0,
        "AEZ16_CLAS": "Tropic - warm / semiarid"
    },
    {
        "CELL5M": 4892825,
        "ISO3": "TZA",
        "ADM0_NAME": "United Republic of Tanzania",
        "ADM1_NAME_ALT": "Manyara",
        "ADM2_NAME_ALT": "Hanang",
        "X": 35.4583,
        "Y": -4.375,
        "whea_h": 148,
        "AEZ16_CLAS": "Tropic - cool / subhumid"
    },
    {
        "CELL5M": 4953317,
        "ISO3": "TZA",
        "ADM0_NAME": "United Republic of Tanzania",
        "ADM1_NAME_ALT": "Manyara",
        "ADM2_NAME_ALT": "Kiteto",
        "X": 36.4583,
        "Y": -5.5417,
        "whea_h": 0,
        "AEZ16_CLAS": "Tropic - cool / semiarid"
    }
]


real    0m2.660s
user    0m0.000s
sys     0m0.030s
#+END_SRC

Javascript client code is also available.

#+BEGIN_SRC javascript

// OpenCPU requires jquery
<script src="js/jquery.js"></script>
<script src="js/opencpu.js"></script>

// Set page to communicate with "hcapi3" package on server
ocpu.seturl("//hcapi.harvestchoice.org/ocpu/library/hcapi3/R")

// JavaScript client code
var layer = $("#layer").val();
var req = $("#plotdiv").rplot("getPlot", { var : layer })

// Optional: add custom callbacks
req.fail(function(){
    alert("R returned an error: " + req.responseText);
});

// Toy example
var req = ocpu.call("getLayer", {
   var: ["maiz_h", "maiz_y"], by: ["wealth", "AEZ16_CLAS"], iso3: "GHA"},

   function(session){

    //read the session properties (just for fun)
    $("#key").text(session.getKey());
    $("#location").text(session.getLoc());

    //retrieve session console (stdout) async
    session.getConsole(function(outtxt){
        $("#output").text(outtxt);
    });

    //retrieve the returned object async
    session.getObject(function(data){
        //data is the object returned by the R function
        alert("Array of length " + data.length + ".\nFirst few values:" + data.slice(0,3));
    });
})
#+END_SRC


